# 1
# Model Technology ModelSim - Intel FPGA Edition vlog 10.5b Compiler 2016.10 Oct  5 2016
# Start time: 09:23:17 on Apr 08,2024
# vlog -sv -timescale 1ps/1ps -work work -f sources.txt 
# -- Compiling package instr_register_pkg
# -- Compiling module instr_register
# -- Importing package instr_register_pkg
# -- Compiling module instr_register_test
# -- Compiling module top
# 
# Top level modules:
# 	top
# End time: 09:23:17 on Apr 08,2024, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vsim -novopt -quiet -nocoverage "+notimingchecks" "+nowarnTSCALE" -sva top -GREAD_NUMBER=50 -GWRITE_ORDER=2 -GREAD_ORDER=0 -GWRITE_NUMBER=30 
# Start time: 09:23:17 on Apr 08,2024
# ** Warning: (vsim-3017) ../../TSC_Lab/lab01_testbench-interface/top.sv(24): [TFMPC] - Too few port connections. Expected 10, found 9.
#    Time: 0 ns  Iteration: 0  Instance: /top/test File: ../../TSC_Lab/lab01_testbench-interface/instr_register_test.sv
# ** Warning: (vsim-3722) ../../TSC_Lab/lab01_testbench-interface/top.sv(24): [TFMPC] - Missing connection for port 'result'.
# 
# 
# *********************
# *  THIS IS A SELF-CHECKING TESTBENCH (YET).  YOU  *
# * DON'T NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     *
# *  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  *
# *********************
# 
# Reseting the instruction register...
# 
# Writing values to register stack...
# Writing to register location 31: 
#   opcode = 1 (PASSA)
#   operand_a = -12
#   operand_b = 7
# 
# Read from register location 31: 
#   opcode = 1 (PASSA)
#   operand_a = -12
#   operand_b = 7
# Writing to register location 30: 
#   opcode = 0 (ZERO)
#   operand_a = -9
#   operand_b = 1
# 
# Read from register location 30: 
#   opcode = 0 (ZERO)
#   operand_a = -9
#   operand_b = 1
# Writing to register location 29: 
#   opcode = 7 (MOD)
#   operand_a = -15
#   operand_b = 8
# 
# Read from register location 29: 
#   opcode = 7 (MOD)
#   operand_a = -15
#   operand_b = 8
# Writing to register location 28: 
#   opcode = 5 (MULT)
#   operand_a = -8
#   operand_b = 7
# 
# Read from register location 28: 
#   opcode = 5 (MULT)
#   operand_a = -8
#   operand_b = 7
# Writing to register location 27: 
#   opcode = 3 (ADD)
#   operand_a = -9
#   operand_b = 5
# 
# Read from register location 27: 
#   opcode = 3 (ADD)
#   operand_a = -9
#   operand_b = 5
# Writing to register location 26: 
#   opcode = 4 (SUB)
#   operand_a = 5
#   operand_b = 3
# 
# Read from register location 26: 
#   opcode = 4 (SUB)
#   operand_a = 5
#   operand_b = 3
# Writing to register location 25: 
#   opcode = 3 (ADD)
#   operand_a = 3
#   operand_b = 12
# 
# Read from register location 25: 
#   opcode = 3 (ADD)
#   operand_a = 3
#   operand_b = 12
# Writing to register location 24: 
#   opcode = 6 (DIV)
#   operand_a = 12
#   operand_b = 3
# 
# Read from register location 24: 
#   opcode = 6 (DIV)
#   operand_a = 12
#   operand_b = 3
# Writing to register location 23: 
#   opcode = 1 (PASSA)
#   operand_a = 3
#   operand_b = 14
# 
# Read from register location 23: 
#   opcode = 1 (PASSA)
#   operand_a = 3
#   operand_b = 14
# Writing to register location 22: 
#   opcode = 1 (PASSA)
#   operand_a = -2
#   operand_b = 9
# 
# Read from register location 22: 
#   opcode = 1 (PASSA)
#   operand_a = -2
#   operand_b = 9
# Writing to register location 21: 
#   opcode = 7 (MOD)
#   operand_a = 9
#   operand_b = 9
# 
# Read from register location 21: 
#   opcode = 7 (MOD)
#   operand_a = 9
#   operand_b = 9
# Writing to register location 20: 
#   opcode = 3 (ADD)
#   operand_a = 9
#   operand_b = 7
# 
# Read from register location 20: 
#   opcode = 3 (ADD)
#   operand_a = 9
#   operand_b = 7
# Writing to register location 19: 
#   opcode = 5 (MULT)
#   operand_a = 7
#   operand_b = 3
# 
# Read from register location 19: 
#   opcode = 5 (MULT)
#   operand_a = 7
#   operand_b = 3
# Writing to register location 18: 
#   opcode = 7 (MOD)
#   operand_a = 3
#   operand_b = 5
# 
# Read from register location 18: 
#   opcode = 7 (MOD)
#   operand_a = 3
#   operand_b = 5
# Writing to register location 17: 
#   opcode = 0 (ZERO)
#   operand_a = -11
#   operand_b = 15
# 
# Read from register location 17: 
#   opcode = 0 (ZERO)
#   operand_a = -11
#   operand_b = 15
# Writing to register location 16: 
#   opcode = 6 (DIV)
#   operand_a = 15
#   operand_b = 0
# 
# Read from register location 16: 
#   opcode = 6 (DIV)
#   operand_a = 15
#   operand_b = 0
# Writing to register location 15: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 14
# 
# Read from register location 15: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 14
# Writing to register location 14: 
#   opcode = 3 (ADD)
#   operand_a = -2
#   operand_b = 4
# 
# Read from register location 14: 
#   opcode = 3 (ADD)
#   operand_a = -2
#   operand_b = 4
# Writing to register location 13: 
#   opcode = 0 (ZERO)
#   operand_a = -12
#   operand_b = 3
# 
# Read from register location 13: 
#   opcode = 0 (ZERO)
#   operand_a = -12
#   operand_b = 3
# Writing to register location 12: 
#   opcode = 4 (SUB)
#   operand_a = -13
#   operand_b = 8
# 
# Read from register location 12: 
#   opcode = 4 (SUB)
#   operand_a = -13
#   operand_b = 8
# Writing to register location 11: 
#   opcode = 1 (PASSA)
#   operand_a = -8
#   operand_b = 12
# 
# Read from register location 11: 
#   opcode = 1 (PASSA)
#   operand_a = -8
#   operand_b = 12
# Writing to register location 10: 
#   opcode = 1 (PASSA)
#   operand_a = -4
#   operand_b = 1
# 
# Read from register location 10: 
#   opcode = 1 (PASSA)
#   operand_a = -4
#   operand_b = 1
# Writing to register location 9: 
#   opcode = 1 (PASSA)
#   operand_a = -15
#   operand_b = 1
# 
# Read from register location 9: 
#   opcode = 1 (PASSA)
#   operand_a = -15
#   operand_b = 1
# Writing to register location 8: 
#   opcode = 7 (MOD)
#   operand_a = 1
#   operand_b = 1
# 
# Read from register location 8: 
#   opcode = 7 (MOD)
#   operand_a = 1
#   operand_b = 1
# Writing to register location 7: 
#   opcode = 5 (MULT)
#   operand_a = 1
#   operand_b = 15
# 
# Read from register location 7: 
#   opcode = 5 (MULT)
#   operand_a = 1
#   operand_b = 15
# Writing to register location 6: 
#   opcode = 7 (MOD)
#   operand_a = -1
#   operand_b = 5
# 
# Read from register location 6: 
#   opcode = 7 (MOD)
#   operand_a = -1
#   operand_b = 5
# Writing to register location 5: 
#   opcode = 4 (SUB)
#   operand_a = 5
#   operand_b = 7
# 
# Read from register location 5: 
#   opcode = 4 (SUB)
#   operand_a = 5
#   operand_b = 7
# Writing to register location 4: 
#   opcode = 4 (SUB)
#   operand_a = -9
#   operand_b = 4
# 
# Read from register location 4: 
#   opcode = 4 (SUB)
#   operand_a = -9
#   operand_b = 4
# Writing to register location 3: 
#   opcode = 5 (MULT)
#   operand_a = 4
#   operand_b = 12
# 
# Read from register location 3: 
#   opcode = 5 (MULT)
#   operand_a = 4
#   operand_b = 12
# Writing to register location 2: 
#   opcode = 3 (ADD)
#   operand_a = 12
#   operand_b = 5
# 
# Read from register location 2: 
#   opcode = 3 (ADD)
#   operand_a = 12
#   operand_b = 5
# Writing to register location 1: 
#   opcode = 4 (SUB)
#   operand_a = -11
#   operand_b = 11
# 
# Read from register location 1: 
#   opcode = 4 (SUB)
#   operand_a = -11
#   operand_b = 11
# Writing to register location 0: 
#   opcode = 0 (ZERO)
#   operand_a = 11
#   operand_b = 12
# 
# Read from register location 0: 
#   opcode = 0 (ZERO)
#   operand_a = 11
#   operand_b = 12
# Writing to register location 31: 
#   opcode = 2 (PASSB)
#   operand_a = -4
#   operand_b = 8
# 
# Read from register location 31: 
#   opcode = 2 (PASSB)
#   operand_a = -4
#   operand_b = 8
# Writing to register location 30: 
#   opcode = 2 (PASSB)
#   operand_a = 8
#   operand_b = 10
# 
# Read from register location 30: 
#   opcode = 2 (PASSB)
#   operand_a = 8
#   operand_b = 10
# Writing to register location 29: 
#   opcode = 6 (DIV)
#   operand_a = -6
#   operand_b = 2
# 
# Read from register location 29: 
#   opcode = 6 (DIV)
#   operand_a = -6
#   operand_b = 2
# Writing to register location 28: 
#   opcode = 1 (PASSA)
#   operand_a = 2
#   operand_b = 14
# 
# Read from register location 28: 
#   opcode = 1 (PASSA)
#   operand_a = 2
#   operand_b = 14
# Writing to register location 27: 
#   opcode = 4 (SUB)
#   operand_a = 14
#   operand_b = 9
# 
# Read from register location 27: 
#   opcode = 4 (SUB)
#   operand_a = 14
#   operand_b = 9
# Writing to register location 26: 
#   opcode = 7 (MOD)
#   operand_a = -7
#   operand_b = 12
# 
# Read from register location 26: 
#   opcode = 7 (MOD)
#   operand_a = -7
#   operand_b = 12
# Writing to register location 25: 
#   opcode = 1 (PASSA)
#   operand_a = 12
#   operand_b = 7
# 
# Read from register location 25: 
#   opcode = 1 (PASSA)
#   operand_a = 12
#   operand_b = 7
# Writing to register location 24: 
#   opcode = 5 (MULT)
#   operand_a = -9
#   operand_b = 1
# 
# Read from register location 24: 
#   opcode = 5 (MULT)
#   operand_a = -9
#   operand_b = 1
# Writing to register location 23: 
#   opcode = 6 (DIV)
#   operand_a = -15
#   operand_b = 13
# 
# Read from register location 23: 
#   opcode = 6 (DIV)
#   operand_a = -15
#   operand_b = 13
# Writing to register location 22: 
#   opcode = 3 (ADD)
#   operand_a = -3
#   operand_b = 6
# 
# Read from register location 22: 
#   opcode = 3 (ADD)
#   operand_a = -3
#   operand_b = 6
# Writing to register location 21: 
#   opcode = 3 (ADD)
#   operand_a = 6
#   operand_b = 3
# 
# Read from register location 21: 
#   opcode = 3 (ADD)
#   operand_a = 6
#   operand_b = 3
# Writing to register location 20: 
#   opcode = 1 (PASSA)
#   operand_a = -13
#   operand_b = 11
# 
# Read from register location 20: 
#   opcode = 1 (PASSA)
#   operand_a = -13
#   operand_b = 11
# Writing to register location 19: 
#   opcode = 7 (MOD)
#   operand_a = 11
#   operand_b = 1
# 
# Read from register location 19: 
#   opcode = 7 (MOD)
#   operand_a = 11
#   operand_b = 1
# Writing to register location 18: 
#   opcode = 5 (MULT)
#   operand_a = -15
#   operand_b = 15
# 
# Read from register location 18: 
#   opcode = 5 (MULT)
#   operand_a = -15
#   operand_b = 15
# Writing to register location 17: 
#   opcode = 1 (PASSA)
#   operand_a = 15
#   operand_b = 13
# 
# Read from register location 17: 
#   opcode = 1 (PASSA)
#   operand_a = 15
#   operand_b = 13
# Writing to register location 16: 
#   opcode = 7 (MOD)
#   operand_a = -3
#   operand_b = 1
# 
# Read from register location 16: 
#   opcode = 7 (MOD)
#   operand_a = -3
#   operand_b = 1
# Writing to register location 15: 
#   opcode = 0 (ZERO)
#   operand_a = 1
#   operand_b = 15
# 
# Read from register location 15: 
#   opcode = 0 (ZERO)
#   operand_a = 1
#   operand_b = 15
# Writing to register location 14: 
#   opcode = 6 (DIV)
#   operand_a = 15
#   operand_b = 0
# 
# Read from register location 14: 
#   opcode = 6 (DIV)
#   operand_a = 15
#   operand_b = 0
# 
# Reading back the same register locations written...
# Read from register location 0: 
#   opcode = 0 (ZERO)
#   operand_a = 11
#   operand_b = 12
#  result_t = 0
# 
# Opcode is correct from register location 0: 
# Operant_a is correct from register location 0: 
# Operant_b is correct from register location 0: 
# Result check: Approved
# Read from register location 1: 
#   opcode = 4 (SUB)
#   operand_a = -11
#   operand_b = 11
#  result_t = -22
# 
# Opcode is correct from register location 1: 
# Operant_a is correct from register location 1: 
# Operant_b is correct from register location 1: 
# Result check: Approved
# Read from register location 2: 
#   opcode = 3 (ADD)
#   operand_a = 12
#   operand_b = 5
#  result_t = 17
# 
# Opcode is correct from register location 2: 
# Operant_a is correct from register location 2: 
# Operant_b is correct from register location 2: 
# Result check: Approved
# Read from register location 3: 
#   opcode = 5 (MULT)
#   operand_a = 4
#   operand_b = 12
#  result_t = 48
# 
# Opcode is correct from register location 3: 
# Operant_a is correct from register location 3: 
# Operant_b is correct from register location 3: 
# Result check: Approved
# Read from register location 4: 
#   opcode = 4 (SUB)
#   operand_a = -9
#   operand_b = 4
#  result_t = -13
# 
# Opcode is correct from register location 4: 
# Operant_a is correct from register location 4: 
# Operant_b is correct from register location 4: 
# Result check: Approved
# Read from register location 5: 
#   opcode = 4 (SUB)
#   operand_a = 5
#   operand_b = 7
#  result_t = -2
# 
# Opcode is correct from register location 5: 
# Operant_a is correct from register location 5: 
# Operant_b is correct from register location 5: 
# Result check: Approved
# Read from register location 6: 
#   opcode = 7 (MOD)
#   operand_a = -1
#   operand_b = 5
#  result_t = -1
# 
# Opcode is correct from register location 6: 
# Operant_a is correct from register location 6: 
# Operant_b is correct from register location 6: 
# Result check: Approved
# Read from register location 7: 
#   opcode = 5 (MULT)
#   operand_a = 1
#   operand_b = 15
#  result_t = 15
# 
# Opcode is correct from register location 7: 
# Operant_a is correct from register location 7: 
# Operant_b is correct from register location 7: 
# Result check: Approved
# Read from register location 8: 
#   opcode = 7 (MOD)
#   operand_a = 1
#   operand_b = 1
#  result_t = 0
# 
# Opcode is correct from register location 8: 
# Operant_a is correct from register location 8: 
# Operant_b is correct from register location 8: 
# Result check: Approved
# Read from register location 9: 
#   opcode = 1 (PASSA)
#   operand_a = -15
#   operand_b = 1
#  result_t = -15
# 
# Opcode is correct from register location 9: 
# Operant_a is correct from register location 9: 
# Operant_b is correct from register location 9: 
# Result check: Approved
# Read from register location 10: 
#   opcode = 1 (PASSA)
#   operand_a = -4
#   operand_b = 1
#  result_t = -4
# 
# Opcode is correct from register location 10: 
# Operant_a is correct from register location 10: 
# Operant_b is correct from register location 10: 
# Result check: Approved
# Read from register location 11: 
#   opcode = 1 (PASSA)
#   operand_a = -8
#   operand_b = 12
#  result_t = -8
# 
# Opcode is correct from register location 11: 
# Operant_a is correct from register location 11: 
# Operant_b is correct from register location 11: 
# Result check: Approved
# Read from register location 12: 
#   opcode = 4 (SUB)
#   operand_a = -13
#   operand_b = 8
#  result_t = -21
# 
# Opcode is correct from register location 12: 
# Operant_a is correct from register location 12: 
# Operant_b is correct from register location 12: 
# Result check: Approved
# Read from register location 13: 
#   opcode = 0 (ZERO)
#   operand_a = -12
#   operand_b = 3
#  result_t = 0
# 
# Opcode is correct from register location 13: 
# Operant_a is correct from register location 13: 
# Operant_b is correct from register location 13: 
# Result check: Approved
# Read from register location 14: 
#   opcode = 6 (DIV)
#   operand_a = 15
#   operand_b = 0
#  result_t = 0
# 
# Opcode is correct from register location 14: 
# Operant_a is correct from register location 14: 
# Operant_b is correct from register location 14: 
# Result check: Approved
# Read from register location 15: 
#   opcode = 0 (ZERO)
#   operand_a = 1
#   operand_b = 15
#  result_t = 0
# 
# Opcode is correct from register location 15: 
# Operant_a is correct from register location 15: 
# Operant_b is correct from register location 15: 
# Result check: Approved
# Read from register location 16: 
#   opcode = 7 (MOD)
#   operand_a = -3
#   operand_b = 1
#  result_t = 0
# 
# Opcode is correct from register location 16: 
# Operant_a is correct from register location 16: 
# Operant_b is correct from register location 16: 
# Result check: Approved
# Read from register location 17: 
#   opcode = 1 (PASSA)
#   operand_a = 15
#   operand_b = 13
#  result_t = 15
# 
# Opcode is correct from register location 17: 
# Operant_a is correct from register location 17: 
# Operant_b is correct from register location 17: 
# Result check: Approved
# Read from register location 18: 
#   opcode = 5 (MULT)
#   operand_a = -15
#   operand_b = 15
#  result_t = -225
# 
# Opcode is correct from register location 18: 
# Operant_a is correct from register location 18: 
# Operant_b is correct from register location 18: 
# Result check: Approved
# Read from register location 19: 
#   opcode = 7 (MOD)
#   operand_a = 11
#   operand_b = 1
#  result_t = 0
# 
# Opcode is correct from register location 19: 
# Operant_a is correct from register location 19: 
# Operant_b is correct from register location 19: 
# Result check: Approved
# Read from register location 20: 
#   opcode = 1 (PASSA)
#   operand_a = -13
#   operand_b = 11
#  result_t = -13
# 
# Opcode is correct from register location 20: 
# Operant_a is correct from register location 20: 
# Operant_b is correct from register location 20: 
# Result check: Approved
# Read from register location 21: 
#   opcode = 3 (ADD)
#   operand_a = 6
#   operand_b = 3
#  result_t = 9
# 
# Opcode is correct from register location 21: 
# Operant_a is correct from register location 21: 
# Operant_b is correct from register location 21: 
# Result check: Approved
# Read from register location 22: 
#   opcode = 3 (ADD)
#   operand_a = -3
#   operand_b = 6
#  result_t = 3
# 
# Opcode is correct from register location 22: 
# Operant_a is correct from register location 22: 
# Operant_b is correct from register location 22: 
# Result check: Approved
# Read from register location 23: 
#   opcode = 6 (DIV)
#   operand_a = -15
#   operand_b = 13
#  result_t = -1
# 
# Opcode is correct from register location 23: 
# Operant_a is correct from register location 23: 
# Operant_b is correct from register location 23: 
# Result check: Approved
# Read from register location 24: 
#   opcode = 5 (MULT)
#   operand_a = -9
#   operand_b = 1
#  result_t = -9
# 
# Opcode is correct from register location 24: 
# Operant_a is correct from register location 24: 
# Operant_b is correct from register location 24: 
# Result check: Approved
# Read from register location 25: 
#   opcode = 1 (PASSA)
#   operand_a = 12
#   operand_b = 7
#  result_t = 12
# 
# Opcode is correct from register location 25: 
# Operant_a is correct from register location 25: 
# Operant_b is correct from register location 25: 
# Result check: Approved
# Read from register location 26: 
#   opcode = 7 (MOD)
#   operand_a = -7
#   operand_b = 12
#  result_t = -7
# 
# Opcode is correct from register location 26: 
# Operant_a is correct from register location 26: 
# Operant_b is correct from register location 26: 
# Result check: Approved
# Read from register location 27: 
#   opcode = 4 (SUB)
#   operand_a = 14
#   operand_b = 9
#  result_t = 5
# 
# Opcode is correct from register location 27: 
# Operant_a is correct from register location 27: 
# Operant_b is correct from register location 27: 
# Result check: Approved
# Read from register location 28: 
#   opcode = 1 (PASSA)
#   operand_a = 2
#   operand_b = 14
#  result_t = 2
# 
# Opcode is correct from register location 28: 
# Operant_a is correct from register location 28: 
# Operant_b is correct from register location 28: 
# Result check: Approved
# Read from register location 29: 
#   opcode = 6 (DIV)
#   operand_a = -6
#   operand_b = 2
#  result_t = -3
# 
# Opcode is correct from register location 29: 
# Operant_a is correct from register location 29: 
# Operant_b is correct from register location 29: 
# Result check: Approved
# 
# --- FINAL REPORT ---
# Operations passed: 30/30.
# Operations failed: 0/30.
# 
# *********************
# *  THIS IS A SELF-CHECKING TESTBENCH (YET).  YOU  *
# * DON'T NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     *
# *  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  *
# *********************
# 
# ** Note: $finish    : ../../TSC_Lab/lab01_testbench-interface/instr_register_test.sv(80)
#    Time: 846 ns  Iteration: 1  Instance: /top/test
# End time: 09:23:18 on Apr 08,2024, Elapsed time: 0:00:01
# Errors: 0, Warnings: 2
