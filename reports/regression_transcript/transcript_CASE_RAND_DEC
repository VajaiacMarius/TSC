# 1
# Model Technology ModelSim - Intel FPGA Edition vlog 10.5b Compiler 2016.10 Oct  5 2016
# Start time: 08:16:14 on Apr 15,2024
# vlog -sv -timescale 1ps/1ps -work work -f sources.txt 
# -- Compiling package instr_register_pkg
# -- Compiling module instr_register
# -- Importing package instr_register_pkg
# -- Compiling module instr_register_test
# ** Warning: ../../TSC_Lab/lab01_testbench-interface/instr_register_test.sv(83): (vlog-2240) Treating stand-alone use of function 'final_report' as an implicit VOID cast.
# ** Warning: ../../TSC_Lab/lab01_testbench-interface/instr_register_test.sv(203): (vlog-2250) Function "final_report" has no return value assignment.
# -- Compiling module top
# 
# Top level modules:
# 	top
# End time: 08:16:14 on Apr 15,2024, Elapsed time: 0:00:00
# Errors: 0, Warnings: 2
# vsim -novopt -quiet -nocoverage "+notimingchecks" "+nowarnTSCALE" -sva top -GCASE_NAME=CASE_RAND_DEC -GREAD_NUMBER=10 -GWRITE_ORDER=1 -GREAD_ORDER=2 -GWRITE_NUMBER=10 
# Start time: 08:16:14 on Apr 15,2024
# 
# 
# ***********************************************************
# ***  THIS IS A SELF-CHECKING TESTBENCH .  YOU DON'T  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# Reseting the instruction register...
# 
# Writing values to register stack...
# -2147483645Writing to register location 31: 
# -2147483645  opcode = 1 (PASSA)
# -2147483645  operand_a = -12
# -2147483645  operand_b = 7
# 
# Read from register location 31: 
#   opcode = 1 (PASSA)
#   operand_a = -12
#   operand_b = 7
# -2147483645Writing to register location 30: 
# -2147483645  opcode = 0 (ZERO)
# -2147483645  operand_a = -9
# -2147483645  operand_b = 1
# 
# Read from register location 30: 
#   opcode = 0 (ZERO)
#   operand_a = -9
#   operand_b = 1
# -2147483645Writing to register location 29: 
# -2147483645  opcode = 7 (MOD)
# -2147483645  operand_a = -15
# -2147483645  operand_b = 8
# 
# Read from register location 29: 
#   opcode = 7 (MOD)
#   operand_a = -15
#   operand_b = 8
# -2147483645Writing to register location 28: 
# -2147483645  opcode = 5 (MULT)
# -2147483645  operand_a = -8
# -2147483645  operand_b = 7
# 
# Read from register location 28: 
#   opcode = 5 (MULT)
#   operand_a = -8
#   operand_b = 7
# -2147483645Writing to register location 27: 
# -2147483645  opcode = 3 (ADD)
# -2147483645  operand_a = -9
# -2147483645  operand_b = 5
# 
# Read from register location 27: 
#   opcode = 3 (ADD)
#   operand_a = -9
#   operand_b = 5
# -2147483645Writing to register location 26: 
# -2147483645  opcode = 4 (SUB)
# -2147483645  operand_a = 5
# -2147483645  operand_b = 3
# 
# Read from register location 26: 
#   opcode = 4 (SUB)
#   operand_a = 5
#   operand_b = 3
# -2147483645Writing to register location 25: 
# -2147483645  opcode = 3 (ADD)
# -2147483645  operand_a = 3
# -2147483645  operand_b = 12
# 
# Read from register location 25: 
#   opcode = 3 (ADD)
#   operand_a = 3
#   operand_b = 12
# -2147483645Writing to register location 24: 
# -2147483645  opcode = 6 (DIV)
# -2147483645  operand_a = 12
# -2147483645  operand_b = 3
# 
# Read from register location 24: 
#   opcode = 6 (DIV)
#   operand_a = 12
#   operand_b = 3
# -2147483645Writing to register location 23: 
# -2147483645  opcode = 1 (PASSA)
# -2147483645  operand_a = 3
# -2147483645  operand_b = 14
# 
# Read from register location 23: 
#   opcode = 1 (PASSA)
#   operand_a = 3
#   operand_b = 14
# -2147483645Writing to register location 22: 
# -2147483645  opcode = 1 (PASSA)
# -2147483645  operand_a = -2
# -2147483645  operand_b = 9
# 
# Read from register location 22: 
#   opcode = 1 (PASSA)
#   operand_a = -2
#   operand_b = 9
# 
# Reading back the same register locations written...
# -2147483644Read from register location 7: 
# -2147483644  opcode = 0 (ZERO)
# -2147483644  operand_a = 0
# -2147483644  operand_b = 0
# -2147483644 result_t = 0
# 
# Opcode is correct from register location 7: 
# Opcode is incorrect from register location 7: 
# Operant_a is correct from register location 7: 
# Operant_a is incorrect from register location 7: 
# Operant_b is correct from register location 7: 
# Operant_b is incorrect from register location 7: 
# Transaction {ZERO, 0, 0, 0} failed
# 
# 
# Result check: Approved
# -2147483644Read from register location 19: 
# -2147483644  opcode = 0 (ZERO)
# -2147483644  operand_a = 0
# -2147483644  operand_b = 0
# -2147483644 result_t = 0
# 
# Opcode is correct from register location 19: 
# Opcode is incorrect from register location 19: 
# Operant_a is correct from register location 19: 
# Operant_a is incorrect from register location 19: 
# Operant_b is correct from register location 19: 
# Operant_b is incorrect from register location 19: 
# Transaction {ZERO, 0, 0, 0} failed
# 
# 
# Result check: Approved
# -2147483644Read from register location 5: 
# -2147483644  opcode = 0 (ZERO)
# -2147483644  operand_a = 0
# -2147483644  operand_b = 0
# -2147483644 result_t = 0
# 
# Opcode is correct from register location 5: 
# Opcode is incorrect from register location 5: 
# Operant_a is correct from register location 5: 
# Operant_a is incorrect from register location 5: 
# Operant_b is correct from register location 5: 
# Operant_b is incorrect from register location 5: 
# Transaction {ZERO, 0, 0, 0} failed
# 
# 
# Result check: Approved
# -2147483644Read from register location 31: 
# -2147483644  opcode = 1 (PASSA)
# -2147483644  operand_a = -12
# -2147483644  operand_b = 7
# -2147483644 result_t = -12
# 
# Opcode is correct from register location 31: 
# Opcode is incorrect from register location 31: 
# Operant_a is correct from register location 31: 
# Operant_a is incorrect from register location 31: 
# Operant_b is correct from register location 31: 
# Operant_b is incorrect from register location 31: 
# Transaction {PASSA, -12, 7, -12} failed
# 
# 
# Result check: Approved
# -2147483644Read from register location 0: 
# -2147483644  opcode = 0 (ZERO)
# -2147483644  operand_a = 0
# -2147483644  operand_b = 0
# -2147483644 result_t = 0
# 
# Opcode is correct from register location 0: 
# Opcode is incorrect from register location 0: 
# Operant_a is correct from register location 0: 
# Operant_a is incorrect from register location 0: 
# Operant_b is correct from register location 0: 
# Operant_b is incorrect from register location 0: 
# Transaction {ZERO, 0, 0, 0} failed
# 
# 
# Result check: Approved
# -2147483644Read from register location 14: 
# -2147483644  opcode = 0 (ZERO)
# -2147483644  operand_a = 0
# -2147483644  operand_b = 0
# -2147483644 result_t = 0
# 
# Opcode is correct from register location 14: 
# Opcode is incorrect from register location 14: 
# Operant_a is correct from register location 14: 
# Operant_a is incorrect from register location 14: 
# Operant_b is correct from register location 14: 
# Operant_b is incorrect from register location 14: 
# Transaction {ZERO, 0, 0, 0} failed
# 
# 
# Result check: Approved
# -2147483644Read from register location 20: 
# -2147483644  opcode = 0 (ZERO)
# -2147483644  operand_a = 0
# -2147483644  operand_b = 0
# -2147483644 result_t = 0
# 
# Opcode is correct from register location 20: 
# Opcode is incorrect from register location 20: 
# Operant_a is correct from register location 20: 
# Operant_a is incorrect from register location 20: 
# Operant_b is correct from register location 20: 
# Operant_b is incorrect from register location 20: 
# Transaction {ZERO, 0, 0, 0} failed
# 
# 
# Result check: Approved
# -2147483644Read from register location 19: 
# -2147483644  opcode = 0 (ZERO)
# -2147483644  operand_a = 0
# -2147483644  operand_b = 0
# -2147483644 result_t = 0
# 
# Opcode is correct from register location 19: 
# Opcode is incorrect from register location 19: 
# Operant_a is correct from register location 19: 
# Operant_a is incorrect from register location 19: 
# Operant_b is correct from register location 19: 
# Operant_b is incorrect from register location 19: 
# Transaction {ZERO, 0, 0, 0} failed
# 
# 
# Result check: Approved
# -2147483644Read from register location 8: 
# -2147483644  opcode = 0 (ZERO)
# -2147483644  operand_a = 0
# -2147483644  operand_b = 0
# -2147483644 result_t = 0
# 
# Opcode is correct from register location 8: 
# Opcode is incorrect from register location 8: 
# Operant_a is correct from register location 8: 
# Operant_a is incorrect from register location 8: 
# Operant_b is correct from register location 8: 
# Operant_b is incorrect from register location 8: 
# Transaction {ZERO, 0, 0, 0} failed
# 
# 
# Result check: Approved
# -2147483644Read from register location 28: 
# -2147483644  opcode = 5 (MULT)
# -2147483644  operand_a = -8
# -2147483644  operand_b = 7
# -2147483644 result_t = -56
# 
# Opcode is correct from register location 28: 
# Opcode is incorrect from register location 28: 
# Operant_a is correct from register location 28: 
# Operant_a is incorrect from register location 28: 
# Operant_b is correct from register location 28: 
# Operant_b is incorrect from register location 28: 
# Transaction {MULT, -8, 7, -56} failed
# 
# 
# Result check: Approved
# Failed tests 0: 
# Passed tests 10: 
# -2147483643
# Number of errors per transactions: 0
# -2147483643
# Number of failed tests: 10
# -2147483643
# Failed tests percentage: 100.00%
# 
# ***********************************************************
# ***  THIS IS A SELF-CHECKING TESTBENCH .  YOU DON'T  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# ** Note: $finish    : ../../TSC_Lab/lab01_testbench-interface/instr_register_test.sv(96)
#    Time: 246 ns  Iteration: 1  Instance: /top/test
# End time: 08:16:15 on Apr 15,2024, Elapsed time: 0:00:01
# Errors: 0, Warnings: 0
